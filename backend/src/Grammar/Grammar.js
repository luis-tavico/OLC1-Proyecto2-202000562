/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,11],$V2=[1,12],$V3=[1,13],$V4=[1,29],$V5=[1,30],$V6=[1,36],$V7=[1,31],$V8=[1,32],$V9=[1,33],$Va=[1,34],$Vb=[1,35],$Vc=[1,37],$Vd=[2,5,13,14,16,25,34,35,42,47,50,52,62,70,73],$Ve=[1,43],$Vf=[1,59],$Vg=[1,50],$Vh=[1,51],$Vi=[1,52],$Vj=[1,53],$Vk=[1,54],$Vl=[1,55],$Vm=[1,56],$Vn=[1,57],$Vo=[1,58],$Vp=[1,60],$Vq=[1,69],$Vr=[15,18],$Vs=[1,92],$Vt=[1,85],$Vu=[1,83],$Vv=[1,84],$Vw=[1,86],$Vx=[1,87],$Vy=[1,94],$Vz=[1,95],$VA=[1,88],$VB=[1,89],$VC=[1,90],$VD=[1,91],$VE=[1,93],$VF=[15,18,26,38,68,69,78,79,80,81,82,83,85,86,87,88,89],$VG=[1,106],$VH=[18,38,67],$VI=[1,118],$VJ=[1,119],$VK=[1,120],$VL=[1,121],$VM=[1,122],$VN=[15,18,26,38,69,78,79,82,83,85,86,87,88,89],$VO=[15,18,38,69,82,83],$VP=[1,155],$VQ=[15,18,23,38],$VR=[15,18,26,38,69,82,83,85,86,87,88,89],$VS=[1,172],$VT=[18,69],$VU=[1,193],$VV=[15,18,38],$VW=[18,38];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instructions":4,"EOF":5,"instruction":6,"block":7,"statement":8,"assignment":9,"function":10,"ddl":11,"dml":12,"TK_BEGIN":13,"TK_END":14,"TK_SEMI_COLON":15,"TK_DECLARE":16,"variables":17,"TK_COMMA":18,"variable":19,"TK_AT":20,"TK_ID":21,"type":22,"TK_DEFAULT":23,"expression":24,"TK_SET":25,"TK_EQUAL":26,"print":27,"lower":28,"upper":29,"round":30,"len":31,"truncate":32,"typeof":33,"TK_PRINT":34,"TK_SELECT":35,"TK_LOWER":36,"TK_LEFT_PARENTHESIS":37,"TK_RIGHT_PARENTHESIS":38,"TK_UPPER":39,"TK_ROUND":40,"TK_LEN":41,"TK_TRUNCATE":42,"TK_TYPEOF":43,"createTable":44,"alterTable":45,"dropTable":46,"TK_CREATE":47,"TK_TABLE":48,"attributes":49,"TK_ALTER":50,"TK_ADD":51,"TK_DROP":52,"TK_COLUMN":53,"TK_RENAME":54,"TK_TO":55,"attribute":56,"insert":57,"select":58,"update":59,"truncateTable":60,"delete":61,"TK_INSERT":62,"TK_INTO":63,"id_list":64,"TK_VALUES":65,"values":66,"TK_FROM":67,"TK_TIMES":68,"TK_WHERE":69,"TK_UPDATE":70,"columns":71,"column":72,"TK_DELETE":73,"arithmetic":74,"relational":75,"logical":76,"value":77,"TK_PLUS":78,"TK_MINUS":79,"TK_DIVIDE":80,"TK_MODULUS":81,"TK_AND":82,"TK_OR":83,"TK_NOT":84,"TK_GREATER_THAN":85,"TK_LESS_THAN":86,"TK_GREATER_EQUAL":87,"TK_LESS_EQUAL":88,"TK_NOT_EQUAL":89,"TK_INT":90,"TK_DOUBLE":91,"TK_DATE":92,"TK_VARCHAR":93,"TK_BOOLEAN":94,"TK_INTEGER":95,"TK_DECIMAL":96,"TK_TIME":97,"TK_TEXT":98,"TK_TRUE":99,"TK_FALSE":100,"TK_NULL":101,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",13:"TK_BEGIN",14:"TK_END",15:"TK_SEMI_COLON",16:"TK_DECLARE",18:"TK_COMMA",20:"TK_AT",21:"TK_ID",23:"TK_DEFAULT",25:"TK_SET",26:"TK_EQUAL",34:"TK_PRINT",35:"TK_SELECT",36:"TK_LOWER",37:"TK_LEFT_PARENTHESIS",38:"TK_RIGHT_PARENTHESIS",39:"TK_UPPER",40:"TK_ROUND",41:"TK_LEN",42:"TK_TRUNCATE",43:"TK_TYPEOF",47:"TK_CREATE",48:"TK_TABLE",50:"TK_ALTER",51:"TK_ADD",52:"TK_DROP",53:"TK_COLUMN",54:"TK_RENAME",55:"TK_TO",62:"TK_INSERT",63:"TK_INTO",65:"TK_VALUES",67:"TK_FROM",68:"TK_TIMES",69:"TK_WHERE",70:"TK_UPDATE",73:"TK_DELETE",78:"TK_PLUS",79:"TK_MINUS",80:"TK_DIVIDE",81:"TK_MODULUS",82:"TK_AND",83:"TK_OR",84:"TK_NOT",85:"TK_GREATER_THAN",86:"TK_LESS_THAN",87:"TK_GREATER_EQUAL",88:"TK_LESS_EQUAL",89:"TK_NOT_EQUAL",90:"TK_INT",91:"TK_DOUBLE",92:"TK_DATE",93:"TK_VARCHAR",94:"TK_BOOLEAN",95:"TK_INTEGER",96:"TK_DECIMAL",97:"TK_TIME",98:"TK_TEXT",99:"TK_TRUE",100:"TK_FALSE",101:"TK_NULL"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,4],[8,3],[17,3],[17,1],[19,3],[19,5],[9,6],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[27,3],[28,6],[29,6],[30,8],[31,6],[32,8],[33,6],[11,1],[11,1],[11,1],[44,7],[45,6],[45,7],[45,7],[45,9],[49,3],[49,1],[56,2],[46,4],[12,1],[12,1],[12,1],[12,1],[12,1],[57,11],[58,5],[58,5],[58,7],[58,7],[64,3],[64,1],[59,7],[71,3],[71,1],[72,3],[60,4],[61,6],[24,1],[24,1],[24,1],[24,1],[24,3],[74,3],[74,3],[74,3],[74,3],[74,3],[74,2],[76,3],[76,3],[76,2],[75,3],[75,3],[75,3],[75,3],[75,3],[75,3],[22,1],[22,1],[22,1],[22,1],[22,1],[66,3],[66,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return {'ast':$$[$0-1], 'tokens': tokens, 'errors': errors, 'symbols': symbols}; 
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 14: case 41: case 55: case 58: case 88:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 32: case 33: case 34: case 44: case 45: case 46: case 47: case 48: case 62: case 63: case 64: case 65:
 this.$ = $$[$0]; 
break;
case 10:
 errors.push({type: "Sintactico", error: yytext, line: this._$.first_line, column: this._$.first_column+1, message: `Error sintactico, token '${yytext}' no esperado.`}); 
break;
case 11:
 this.$ = new Block(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2]); 
break;
case 12:
 this.$ = new Statement(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1], symbols); 
break;
case 13: case 40: case 54: case 57: case 87:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 15:
 this.$ = {'line': _$[$0-2].first_line, 'column': _$[$0-2].first_column, 'name': $$[$0-1], 'type': $$[$0], 'value': undefined }; 
break;
case 16:
 this.$ = {'line': _$[$0-4].first_line, 'column': _$[$0-4].first_column, 'name': $$[$0-3], 'type': $$[$0-2], 'value': $$[$0] }; 
break;
case 17:
 this.$ = new Assignment(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0-1], symbols); 
break;
case 25:
 this.$ = new Print(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1]); 
break;
case 26:
 this.$ = new Lower(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-2]); 
break;
case 27:
 this.$ = new Upper(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-2]); 
break;
case 28:
  this.$ = new Round(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-4], $$[$0-2]); 
break;
case 29:
 this.$ = new Len(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-2]); 
break;
case 30:
  this.$ = new Truncate(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-4], $$[$0-2]); 
break;
case 31:
  this.$ = new TypeOf(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-2]); 
break;
case 35:
 this.$ = new CreateTable(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-4], $$[$0-2]);  
break;
case 36:
 this.$ = new Add(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0-1], $$[$0]); 
break;
case 37:
 this.$ = new DropColumn(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-4], $$[$0-1]); 
break;
case 38:
 this.$ = new Rename(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-4], $$[$0-1]); 
break;
case 39:
 this.$ = new RenameColumn(_$[$0-8].first_line, _$[$0-8].first_column, $$[$0-6], $$[$0-3], $$[$0-1]); 
break;
case 42:
 this.$ = new Field(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], $$[$0]); 
break;
case 43:
 this.$ = new DropTable(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]); 
break;
case 49:
 this.$ = new Insert(_$[$0-10].first_line, _$[$0-10].first_column, $$[$0-8], $$[$0-6], $$[$0-2]); 
break;
case 50:
 this.$ = new Select(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-3], $$[$0-1], null);   
break;
case 51:
 this.$ = new Select(_$[$0-4].first_line, _$[$0-4].first_column, null, $$[$0-1], null); 
break;
case 52:
 this.$ = new Select(_$[$0-6].first_line, _$[$0-6].first_column, null, $$[$0-3], $$[$0-1]);   
break;
case 53:
 this.$ = new Select(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-5], $$[$0-3], $$[$0-1]);     
break;
case 56:
 this.$ = new Update(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-5], $$[$0-3], $$[$0-1]); 
break;
case 59:
 this.$ = new Assignment(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]); 
break;
case 60:
 this.$ = new TruncateTable(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]); 
break;
case 61:
 this.$ = new Delete(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0-1]); 
break;
case 66:
 this.$ = $$[$0-1]; 
break;
case 67:
 this.$ = new Arithmetic(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], ArithmeticOption.PLUS, $$[$0]); 
break;
case 68:
 this.$ = new Arithmetic(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], ArithmeticOption.MINUS, $$[$0]); 
break;
case 69:
 this.$ = new Arithmetic(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], ArithmeticOption.TIMES, $$[$0]); 
break;
case 70:
 this.$ = new Arithmetic(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], ArithmeticOption.DIVIDE, $$[$0]); 
break;
case 71:
 this.$ = new Arithmetic(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], ArithmeticOption.MODULUS, $$[$0]); 
break;
case 72:
 this.$ = new Literal(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0], Type.NEGATIVE) 
break;
case 73:
 this.$ = new Logical(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], LogicalOption.AND, $$[$0]); 
break;
case 74:
 this.$ = new Logical(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], LogicalOption.OR, $$[$0]); 
break;
case 75:
 this.$ = new Logical(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], LogicalOption.NOT, $$[$0-1]); 
break;
case 76:
 this.$ = new Relational(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], RelationalOption.GREATER_THAN, $$[$0]); 
break;
case 77:
 this.$ = new Relational(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], RelationalOption.LESS_THAN, $$[$0]); 
break;
case 78:
 this.$ = new Relational(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], RelationalOption.GREATER_EQUAL, $$[$0]); 
break;
case 79:
 this.$ = new Relational(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], RelationalOption.LESS_EQUAL, $$[$0]); 
break;
case 80:
 this.$ = new Relational(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], RelationalOption.EQUAL, $$[$0]); 
break;
case 81:
 this.$ = new Relational(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], RelationalOption.NOT_EQUAL, $$[$0]); 
break;
case 82:
 this.$ = 0; 
break;
case 83:
 this.$ = 1; 
break;
case 84:
 this.$ = 2; 
break;
case 85:
 this.$ = 3; 
break;
case 86:
 this.$ = 4; 
break;
case 89:
 this.$ = new Literal(_$[$0].first_line, _$[$0].first_column, $$[$0], Type.INT); 
break;
case 90:
 this.$ = new Literal(_$[$0].first_line, _$[$0].first_column, $$[$0], Type.DOUBLE); 
break;
case 91:
 this.$ = new Literal(_$[$0].first_line, _$[$0].first_column, $$[$0], Type.DATE); 
break;
case 92:
 this.$ = new Literal(_$[$0].first_line, _$[$0].first_column, $$[$0], Type.VARCHAR); 
break;
case 93: case 94:
 this.$ = new Literal(_$[$0].first_line, _$[$0].first_column, $$[$0], Type.BOOLEAN); 
break;
case 95:
 this.$ = new Access(_$[$0].first_line, _$[$0].first_column, $$[$0], null); 
break;
case 96:
 this.$ = new Literal(_$[$0].first_line, _$[$0].first_column, $$[$0], Type.NULL); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,16:$V2,25:$V3,27:14,28:15,29:16,30:17,31:18,32:19,33:20,34:$V4,35:$V5,42:$V6,44:21,45:22,46:23,47:$V7,50:$V8,52:$V9,57:24,58:25,59:26,60:27,61:28,62:$Va,70:$Vb,73:$Vc},{1:[3]},{2:$V0,5:[1,38],6:39,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,16:$V2,25:$V3,27:14,28:15,29:16,30:17,31:18,32:19,33:20,34:$V4,35:$V5,42:$V6,44:21,45:22,46:23,47:$V7,50:$V8,52:$V9,57:24,58:25,59:26,60:27,61:28,62:$Va,70:$Vb,73:$Vc},o($Vd,[2,3]),o($Vd,[2,4]),o($Vd,[2,5]),o($Vd,[2,6]),o($Vd,[2,7]),o($Vd,[2,8]),o($Vd,[2,9]),o($Vd,[2,10]),{2:$V0,4:40,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,16:$V2,25:$V3,27:14,28:15,29:16,30:17,31:18,32:19,33:20,34:$V4,35:$V5,42:$V6,44:21,45:22,46:23,47:$V7,50:$V8,52:$V9,57:24,58:25,59:26,60:27,61:28,62:$Va,70:$Vb,73:$Vc},{17:41,19:42,20:$Ve},{20:[1,44]},o($Vd,[2,18]),o($Vd,[2,19]),o($Vd,[2,20]),o($Vd,[2,21]),o($Vd,[2,22]),o($Vd,[2,23]),o($Vd,[2,24]),o($Vd,[2,32]),o($Vd,[2,33]),o($Vd,[2,34]),o($Vd,[2,44]),o($Vd,[2,45]),o($Vd,[2,46]),o($Vd,[2,47]),o($Vd,[2,48]),{21:$Vf,24:45,37:$Vg,74:46,75:47,76:48,77:49,79:$Vh,84:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp},{21:$Vq,36:[1,61],39:[1,62],40:[1,63],41:[1,64],42:[1,65],43:[1,66],64:67,68:[1,68]},{48:[1,70]},{48:[1,71]},{48:[1,72]},{63:[1,73]},{21:[1,74]},{48:[1,75]},{67:[1,76]},{1:[2,1]},o($Vd,[2,2]),{2:$V0,6:39,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,14:[1,77],16:$V2,25:$V3,27:14,28:15,29:16,30:17,31:18,32:19,33:20,34:$V4,35:$V5,42:$V6,44:21,45:22,46:23,47:$V7,50:$V8,52:$V9,57:24,58:25,59:26,60:27,61:28,62:$Va,70:$Vb,73:$Vc},{15:[1,78],18:[1,79]},o($Vr,[2,14]),{21:[1,80]},{21:[1,81]},{15:[1,82],26:$Vs,68:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:$Vy,83:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE},o($VF,[2,62]),o($VF,[2,63]),o($VF,[2,64]),o($VF,[2,65]),{21:$Vf,24:96,37:$Vg,74:46,75:47,76:48,77:49,79:$Vh,84:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp},{21:$Vf,24:97,37:$Vg,74:46,75:47,76:48,77:49,79:$Vh,84:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp},{21:$Vf,24:98,37:$Vg,74:46,75:47,76:48,77:49,79:$Vh,84:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp},o($VF,[2,89]),o($VF,[2,90]),o($VF,[2,91]),o($VF,[2,92]),o($VF,[2,93]),o($VF,[2,94]),o($VF,[2,95]),o($VF,[2,96]),{37:[1,99]},{37:[1,100]},{37:[1,101]},{37:[1,102]},{37:[1,103]},{37:[1,104]},{18:$VG,67:[1,105]},{67:[1,107]},o($VH,[2,55]),{21:[1,108]},{21:[1,109]},{21:[1,110]},{21:[1,111]},{25:[1,112]},{21:[1,113]},{21:[1,114]},{15:[1,115]},o($Vd,[2,12]),{19:116,20:$Ve},{22:117,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM},{26:[1,123]},o($Vd,[2,25]),{21:$Vf,24:124,37:$Vg,74:46,75:47,76:48,77:49,79:$Vh,84:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp},{21:$Vf,24:125,37:$Vg,74:46,75:47,76:48,77:49,79:$Vh,84:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp},{21:$Vf,24:126,37:$Vg,74:46,75:47,76:48,77:49,79:$Vh,84:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp},{21:$Vf,24:127,37:$Vg,74:46,75:47,76:48,77:49,79:$Vh,84:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp},{21:$Vf,24:128,37:$Vg,74:46,75:47,76:48,77:49,79:$Vh,84:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp},{21:$Vf,24:129,37:$Vg,74:46,75:47,76:48,77:49,79:$Vh,84:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp},{21:$Vf,24:130,37:$Vg,74:46,75:47,76:48,77:49,79:$Vh,84:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp},{21:$Vf,24:131,37:$Vg,74:46,75:47,76:48,77:49,79:$Vh,84:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp},{21:$Vf,24:132,37:$Vg,74:46,75:47,76:48,77:49,79:$Vh,84:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp},{21:$Vf,24:133,37:$Vg,74:46,75:47,76:48,77:49,79:$Vh,84:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp},{21:$Vf,24:134,37:$Vg,74:46,75:47,76:48,77:49,79:$Vh,84:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp},{21:$Vf,24:135,37:$Vg,74:46,75:47,76:48,77:49,79:$Vh,84:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp},{21:$Vf,24:136,37:$Vg,74:46,75:47,76:48,77:49,79:$Vh,84:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp},{26:$Vs,38:[1,137],68:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:$Vy,83:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE},o($VN,[2,72],{68:$Vt,80:$Vw,81:$Vx}),o($VO,[2,75],{26:$Vs,68:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE}),{21:$Vf,24:138,37:$Vg,74:46,75:47,76:48,77:49,79:$Vh,84:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp},{21:$Vf,24:139,37:$Vg,74:46,75:47,76:48,77:49,79:$Vh,84:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp},{21:$Vf,24:140,37:$Vg,74:46,75:47,76:48,77:49,79:$Vh,84:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp},{21:$Vf,24:141,37:$Vg,74:46,75:47,76:48,77:49,79:$Vh,84:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp},{21:$Vf,24:142,37:$Vg,74:46,75:47,76:48,77:49,79:$Vh,84:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp},{21:$Vf,24:143,37:$Vg,74:46,75:47,76:48,77:49,79:$Vh,84:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp},{21:[1,144]},{21:[1,145]},{21:[1,146]},{37:[1,147]},{51:[1,148],52:[1,149],54:[1,150]},{15:[1,151]},{37:[1,152]},{21:$VP,71:153,72:154},{15:[1,156]},{69:[1,157]},o($Vd,[2,11]),o($Vr,[2,13]),o($Vr,[2,15],{23:[1,158]}),o($VQ,[2,82]),o($VQ,[2,83]),o($VQ,[2,84]),o($VQ,[2,85]),o($VQ,[2,86]),{21:$Vf,24:159,37:$Vg,74:46,75:47,76:48,77:49,79:$Vh,84:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp},o($VN,[2,67],{68:$Vt,80:$Vw,81:$Vx}),o($VN,[2,68],{68:$Vt,80:$Vw,81:$Vx}),o($VF,[2,69]),o($VF,[2,70]),o($VF,[2,71]),o($VR,[2,76],{68:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx}),o($VR,[2,77],{68:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx}),o($VR,[2,78],{68:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx}),o($VR,[2,79],{68:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx}),o($VR,[2,80],{68:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx}),o($VR,[2,81],{68:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx}),o($VO,[2,73],{26:$Vs,68:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE}),o([15,18,38,69,83],[2,74],{26:$Vs,68:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:$Vy,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE}),o($VF,[2,66]),{26:$Vs,38:[1,160],68:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:$Vy,83:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE},{26:$Vs,38:[1,161],68:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:$Vy,83:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE},{18:[1,162],26:$Vs,68:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:$Vy,83:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE},{26:$Vs,38:[1,163],68:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:$Vy,83:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE},{18:[1,164],26:$Vs,68:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:$Vy,83:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE},{26:$Vs,38:[1,165],68:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:$Vy,83:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE},{15:[1,166],69:[1,167]},o($VH,[2,54]),{15:[1,168],69:[1,169]},{21:$VS,49:170,56:171},{21:$VS,49:173,56:171},{53:[1,174]},{53:[1,176],55:[1,175]},o($Vd,[2,43]),{21:$Vq,64:177},{18:[1,179],69:[1,178]},o($VT,[2,58]),{26:[1,180]},o($Vd,[2,60]),{21:$Vf,24:181,37:$Vg,74:46,75:47,76:48,77:49,79:$Vh,84:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp},{21:$Vf,24:182,37:$Vg,74:46,75:47,76:48,77:49,79:$Vh,84:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp},{15:[1,183],26:$Vs,68:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:$Vy,83:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE},{15:[1,184]},{15:[1,185]},{21:$Vf,24:186,37:$Vg,74:46,75:47,76:48,77:49,79:$Vh,84:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp},{15:[1,187]},{21:$Vf,24:188,37:$Vg,74:46,75:47,76:48,77:49,79:$Vh,84:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp},{15:[1,189]},o($Vd,[2,50]),{21:$Vf,24:190,37:$Vg,74:46,75:47,76:48,77:49,79:$Vh,84:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp},o($Vd,[2,51]),{21:$Vf,24:191,37:$Vg,74:46,75:47,76:48,77:49,79:$Vh,84:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp},{18:$VU,38:[1,192]},o($VV,[2,41]),{22:194,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM},{15:[1,195],18:$VU},{21:$Vf,24:196,37:$Vg,74:46,75:47,76:48,77:49,79:$Vh,84:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp},{21:$Vf,24:197,37:$Vg,74:46,75:47,76:48,77:49,79:$Vh,84:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp},{21:[1,198]},{18:$VG,38:[1,199]},{21:$Vf,24:200,37:$Vg,74:46,75:47,76:48,77:49,79:$Vh,84:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp},{21:$VP,72:201},{21:$Vf,24:202,37:$Vg,74:46,75:47,76:48,77:49,79:$Vh,84:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp},{15:[1,203],26:$Vs,68:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:$Vy,83:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE},o($Vr,[2,16],{26:$Vs,68:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:$Vy,83:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE}),o($Vd,[2,17]),o($Vd,[2,26]),o($Vd,[2,27]),{26:$Vs,38:[1,204],68:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:$Vy,83:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE},o($Vd,[2,29]),{26:$Vs,38:[1,205],68:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:$Vy,83:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE},o($Vd,[2,31]),{15:[1,206],26:$Vs,68:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:$Vy,83:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE},{15:[1,207],26:$Vs,68:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:$Vy,83:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE},{15:[1,208]},{21:$VS,56:209},o($VV,[2,42]),o($Vd,[2,36]),{15:[1,210],26:$Vs,68:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:$Vy,83:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE},{15:[1,211],26:$Vs,68:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:$Vy,83:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE},{55:[1,212]},{65:[1,213]},{15:[1,214],26:$Vs,68:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:$Vy,83:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE},o($VT,[2,57]),o($VT,[2,59],{26:$Vs,68:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:$Vy,83:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE}),o($Vd,[2,61]),{15:[1,215]},{15:[1,216]},o($Vd,[2,53]),o($Vd,[2,52]),o($Vd,[2,35]),o($VV,[2,40]),o($Vd,[2,37]),o($Vd,[2,38]),{21:$Vf,24:217,37:$Vg,74:46,75:47,76:48,77:49,79:$Vh,84:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp},{37:[1,218]},o($Vd,[2,56]),o($Vd,[2,28]),o($Vd,[2,30]),{15:[1,219],26:$Vs,68:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:$Vy,83:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE},{21:$Vf,66:220,77:221,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp},o($Vd,[2,39]),{18:[1,223],38:[1,222]},o($VW,[2,88]),{15:[1,224]},{21:$Vf,77:225,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp},o($Vd,[2,49]),o($VW,[2,87])],
defaultActions: {38:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    var line = 1;
    var text = "";
    var errors = [];
    var tokens = [];
   
    // const {errores} = require('./Errores');
    const {Type} = require('../Symbol/Type');
    //Expressions
    const {Literal} = require('../Expression/Literal');
    const {Access} = require('../Expression/Access');
    const {Arithmetic, ArithmeticOption} = require('../Expression/Arithmetic');
    const {Logical, LogicalOption} = require('../Expression/Logical');
    const {Relational, RelationalOption} = require('../Expression/Relational');
    const {Field} = require('../Expression/Field');
    //Instructions
    const {Block} = require('../Instruction/Block');
    const {Statement} = require('../Instruction/Statement');
    const {Assignment} = require('../Instruction/Assignment');
    //Native Functions
    const {Print} = require('../Instruction/Print');
    const {Lower} = require('../Instruction/Lower');
    const {Upper} = require('../Instruction/Upper');
    const {Round} = require('../Instruction/Round');
    const {Len} = require('../Instruction/Len');
    const {TruncateTable} = require('../Instruction/TruncateTable');
    const {TypeOf} = require('../Instruction/TypeOf');

    //DDL
    const {CreateTable} = require('../Instruction/CreateTable');
    const {Add} = require('../Instruction/Add')
    const {DropColumn} = require('../Instruction/DropColumn')
    const {Rename} = require('../Instruction/Rename')
    const {RenameColumn} = require('../Instruction/RenameColumn')
    const {DropTable} = require('../Instruction/DropTable');
    //DML
    const {Insert} = require('../Instruction/Insert');
    const {Select} = require('../Instruction/Select');
    const {Update} = require('../Instruction/Update');
    const {Truncate} = require('../Instruction/Truncate');
    const {Delete} = require('../Instruction/Delete');
    //Symbols
    var symbols = [];

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: line++; 
break;
case 1:  
break;
case 2:  
break;
case 3:  
break;
case 4: tokens.push({token:"TK_BEGIN", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 13; 
break;
case 5: tokens.push({token:"TK_END", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 14; 
break;
case 6: tokens.push({token:"TK_AS", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 'TK_AS'; 
break;
case 7: tokens.push({token:"TK_CREATE", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 47; 
break;
case 8: tokens.push({token:"TK_ALTER", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 50; 
break;
case 9: tokens.push({token:"TK_DROP", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 52; 
break;
case 10: tokens.push({token:"TK_TABLE", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 48; 
break;
case 11: tokens.push({token:"TK_ADD", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 51; 
break;
case 12: tokens.push({token:"TK_RENAME", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 54; 
break;
case 13: tokens.push({token:"TK_COLUMN", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 53; 
break;
case 14: tokens.push({token:"TK_PRINT", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 34; 
break;
case 15: tokens.push({token:"TK_LOWER", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 36; 
break;
case 16: tokens.push({token:"TK_UPPER", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 39; 
break;
case 17: tokens.push({token:"TK_ROUND", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 40; 
break;
case 18: tokens.push({token:"TK_LEN", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 41; 
break;
case 19: tokens.push({token:"TK_TYPEOF", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 43; 
break;
case 20: tokens.push({token:"TK_INSERT", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 62; 
break;
case 21: tokens.push({token:"TK_SELECT", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 35; 
break;
case 22: tokens.push({token:"TK_UPDATE", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 70; 
break;
case 23: tokens.push({token:"TK_TRUNCATE", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 42; 
break;
case 24: tokens.push({token:"TK_DELETE", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 73; 
break;
case 25: tokens.push({token:"TK_FROM", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 67; 
break;
case 26: tokens.push({token:"TK_TO", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 55; 
break;
case 27: tokens.push({token:"TK_WHERE", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 69; 
break;
case 28: tokens.push({token:"TK_DECLARE", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 16; 
break;
case 29: tokens.push({token:"TK_INTO", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 63; 
break;
case 30: tokens.push({token:"TK_VALUES", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 65; 
break;
case 31: tokens.push({token:"TK_SET", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 25; 
break;
case 32: tokens.push({token:"TK_DATE", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 92; 
break;
case 33: tokens.push({token:"TK_INT", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 90; 
break;
case 34: tokens.push({token:"TK_DOUBLE", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 91; 
break;
case 35: tokens.push({token:"TK_VARCHAR", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 93; 
break;
case 36: tokens.push({token:"TK_BOOLEAN", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 94; 
break;
case 37: tokens.push({token:"TK_NULL", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 101; 
break;
case 38: tokens.push({token:"TK_DEFAULT", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 23; 
break;
case 39: tokens.push({token:"TK_TRUE", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 99; 
break;
case 40: tokens.push({token:"TK_FALSE", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 100; 
break;
case 41: tokens.push({token:"TK_AND", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 82; 
break;
case 42: tokens.push({token:"TK_OR", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 83; 
break;
case 43: tokens.push({token:"TK_NOT", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 84; 
break;
case 44: tokens.push({token:"TK_LESS_EQUAL", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 88; 
break;
case 45: tokens.push({token:"TK_GREATER_EQUAL", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 87; 
break;
case 46: tokens.push({token:"TK_NOT_EQUAL", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 89; 
break;
case 47: tokens.push({token:"TK_EQUAL", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 26; 
break;
case 48: tokens.push({token:"TK_LESS_THAN", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 86; 
break;
case 49: tokens.push({token:"TK_GREATER_THAN", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 85; 
break;
case 50: tokens.push({token:"TK_LEFT_PARENTHESIS", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 37; 
break;
case 51: tokens.push({token:"TK_RIGHT_PARENTHESIS", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 38; 
break;
case 52: tokens.push({token:"TK_SEMI_COLON", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 15; 
break;
case 53: tokens.push({token:"TK_AT", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 20; 
break;
case 54: tokens.push({token:"TK_COMMA", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 18; 
break;
case 55: tokens.push({token:"TK_TIME", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 97; 
break;
case 56: tokens.push({token:"TK_DECIMAL", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 96; 
break;
case 57: tokens.push({token:"TK_INTEGER", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 95; 
break;
case 58: tokens.push({token:"TK_ID", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 21; 
break;
case 59: text = ""; this.begin("string"); 
break;
case 60: text += yy_.yytext; 
break;
case 61: text += "\"";   
break;
case 62: text += "\n";   
break;
case 63: text += " ";    
break;
case 64: text += "\t";   
break;
case 65: text += "\\";   
break;
case 66: text += "\'";   
break;
case 67: text += "\r";   
break;
case 68: yy_.yytext = text; this.popState(); tokens.push({token:"TK_TEXT", value: "\""+yy_.yytext+"\"", line: line, column: yy_.yylloc.first_column+1}); return 98; 
break;
case 69: tokens.push({token:"TK_PLUS", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 78; 
break;
case 70: tokens.push({token:"TK_MINUS", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 79; 
break;
case 71: tokens.push({token:"TK_TIMES", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 68; 
break;
case 72: tokens.push({token:"TK_DIVIDE", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 80; 
break;
case 73: tokens.push({token:"TK_MODULUS", value: yy_.yytext, line: line, column: yy_.yylloc.first_column+1}); return 81; 
break;
case 74:return 5;
break;
case 75: errors.push({type:"Lexico", error: yy_.yytext, line: line, column: yy_.yylloc.first_column+1, message: `Error lexico, token '${yy_.yytext}' no reconocido.`}); 
break;
}
},
rules: [/^(?:\n)/i,/^(?:[ \r\t]+)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:--.*)/i,/^(?:begin\b)/i,/^(?:end\b)/i,/^(?:as\b)/i,/^(?:create\b)/i,/^(?:alter\b)/i,/^(?:drop\b)/i,/^(?:table\b)/i,/^(?:add\b)/i,/^(?:rename\b)/i,/^(?:column\b)/i,/^(?:print\b)/i,/^(?:lower\b)/i,/^(?:upper\b)/i,/^(?:round\b)/i,/^(?:len\b)/i,/^(?:typeof\b)/i,/^(?:insert\b)/i,/^(?:select\b)/i,/^(?:update\b)/i,/^(?:truncate\b)/i,/^(?:delete\b)/i,/^(?:from\b)/i,/^(?:to\b)/i,/^(?:where\b)/i,/^(?:declare\b)/i,/^(?:into\b)/i,/^(?:values\b)/i,/^(?:set\b)/i,/^(?:date\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:varchar\b)/i,/^(?:boolean\b)/i,/^(?:null\b)/i,/^(?:default\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:and\b)/i,/^(?:or\b)/i,/^(?:not\b)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:@)/i,/^(?:,)/i,/^(?:(\d{4})-(\d{1,2})-(\d{1,2}))/i,/^(?:[0-9]+\.[0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\s)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:\\r)/i,/^(?:["])/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[60,61,62,63,64,65,66,67,68],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,69,70,71,72,73,74,75],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Grammar;
exports.Parser = Grammar.Parser;
exports.parse = function () { return Grammar.parse.apply(Grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}